{"ast":null,"code":"import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInWeek } from \"./constants.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\n/**\n * The {@link differenceInCalendarISOWeeks} function options.\n */\n\n/**\n * @name differenceInCalendarISOWeeks\n * @category ISO Week Helpers\n * @summary Get the number of calendar ISO weeks between the given dates.\n *\n * @description\n * Get the number of calendar ISO weeks between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of calendar ISO weeks\n *\n * @example\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\n * const result = differenceInCalendarISOWeeks(\n *   new Date(2014, 6, 21),\n *   new Date(2014, 6, 6),\n * );\n * //=> 3\n */\n\nexport function differenceInCalendarISOWeeks(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(options?.in, laterDate, earlierDate);\n  const startOfISOWeekLeft = startOfISOWeek(laterDate_);\n  const startOfISOWeekRight = startOfISOWeek(earlierDate_);\n  const timestampLeft = +startOfISOWeekLeft - getTimezoneOffsetInMilliseconds(startOfISOWeekLeft);\n  const timestampRight = +startOfISOWeekRight - getTimezoneOffsetInMilliseconds(startOfISOWeekRight); // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n\n  return Math.round((timestampLeft - timestampRight) / millisecondsInWeek);\n} // Fallback for modularized imports:\n\nexport default differenceInCalendarISOWeeks;","map":{"version":3,"names":["getTimezoneOffsetInMilliseconds","normalizeDates","millisecondsInWeek","startOfISOWeek","differenceInCalendarISOWeeks","laterDate","earlierDate","options","laterDate_","earlierDate_","in","startOfISOWeekLeft","startOfISOWeekRight","timestampLeft","timestampRight","Math","round"],"sources":["C:/Users/mkane/Downloads/NFLPredictions/nfl-predictions/node_modules/date-fns/differenceInCalendarISOWeeks.js"],"sourcesContent":["import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInWeek } from \"./constants.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\n\n/**\n * The {@link differenceInCalendarISOWeeks} function options.\n */\n\n/**\n * @name differenceInCalendarISOWeeks\n * @category ISO Week Helpers\n * @summary Get the number of calendar ISO weeks between the given dates.\n *\n * @description\n * Get the number of calendar ISO weeks between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of calendar ISO weeks\n *\n * @example\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\n * const result = differenceInCalendarISOWeeks(\n *   new Date(2014, 6, 21),\n *   new Date(2014, 6, 6),\n * );\n * //=> 3\n */\nexport function differenceInCalendarISOWeeks(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const startOfISOWeekLeft = startOfISOWeek(laterDate_);\n  const startOfISOWeekRight = startOfISOWeek(earlierDate_);\n\n  const timestampLeft =\n    +startOfISOWeekLeft - getTimezoneOffsetInMilliseconds(startOfISOWeekLeft);\n  const timestampRight =\n    +startOfISOWeekRight - getTimezoneOffsetInMilliseconds(startOfISOWeekRight);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / millisecondsInWeek);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarISOWeeks;\n"],"mappings":"AAAA,SAASA,+BAAT,QAAgD,2CAAhD;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,4BAAT,CAAsCC,SAAtC,EAAiDC,WAAjD,EAA8DC,OAA9D,EAAuE;EAC5E,MAAM,CAACC,UAAD,EAAaC,YAAb,IAA6BR,cAAc,CAC/CM,OAAO,EAAEG,EADsC,EAE/CL,SAF+C,EAG/CC,WAH+C,CAAjD;EAMA,MAAMK,kBAAkB,GAAGR,cAAc,CAACK,UAAD,CAAzC;EACA,MAAMI,mBAAmB,GAAGT,cAAc,CAACM,YAAD,CAA1C;EAEA,MAAMI,aAAa,GACjB,CAACF,kBAAD,GAAsBX,+BAA+B,CAACW,kBAAD,CADvD;EAEA,MAAMG,cAAc,GAClB,CAACF,mBAAD,GAAuBZ,+BAA+B,CAACY,mBAAD,CADxD,CAZ4E,CAe5E;EACA;EACA;;EACA,OAAOG,IAAI,CAACC,KAAL,CAAW,CAACH,aAAa,GAAGC,cAAjB,IAAmCZ,kBAA9C,CAAP;AACD,C,CAED;;AACA,eAAeE,4BAAf","ignoreList":[]},"metadata":{},"sourceType":"module"}