{"ast":null,"code":"import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { format } from \"./format.js\";\n/**\n * The {@link formatRelative} function options.\n */\n\n/**\n * @name formatRelative\n * @category Common Helpers\n * @summary Represent the date in words relative to the given base date.\n *\n * @description\n * Represent the date in words relative to the given base date.\n *\n * | Distance to the base date | Result                    |\n * |---------------------------|---------------------------|\n * | Previous 6 days           | last Sunday at 04:30 AM   |\n * | Last day                  | yesterday at 04:30 AM     |\n * | Same day                  | today at 04:30 AM         |\n * | Next day                  | tomorrow at 04:30 AM      |\n * | Next 6 days               | Sunday at 04:30 AM        |\n * | Other                     | 12/31/2017                |\n *\n * @param date - The date to format\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The date in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws `options.locale` must contain `formatRelative` property\n *\n * @example\n * // Represent the date of 6 days ago in words relative to the given base date. In this example, today is Wednesday\n * const result = formatRelative(subDays(new Date(), 6), new Date())\n * //=> \"last Thursday at 12:45 AM\"\n */\n\nexport function formatRelative(date, baseDate, options) {\n  const [date_, baseDate_] = normalizeDates(options?.in, date, baseDate);\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions.weekStartsOn ?? defaultOptions.locale?.options?.weekStartsOn ?? 0;\n  const diff = differenceInCalendarDays(date_, baseDate_);\n\n  if (isNaN(diff)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let token;\n\n  if (diff < -6) {\n    token = \"other\";\n  } else if (diff < -1) {\n    token = \"lastWeek\";\n  } else if (diff < 0) {\n    token = \"yesterday\";\n  } else if (diff < 1) {\n    token = \"today\";\n  } else if (diff < 2) {\n    token = \"tomorrow\";\n  } else if (diff < 7) {\n    token = \"nextWeek\";\n  } else {\n    token = \"other\";\n  }\n\n  const formatStr = locale.formatRelative(token, date_, baseDate_, {\n    locale,\n    weekStartsOn\n  });\n  return format(date_, formatStr, {\n    locale,\n    weekStartsOn\n  });\n} // Fallback for modularized imports:\n\nexport default formatRelative;","map":{"version":3,"names":["defaultLocale","getDefaultOptions","normalizeDates","differenceInCalendarDays","format","formatRelative","date","baseDate","options","date_","baseDate_","in","defaultOptions","locale","weekStartsOn","diff","isNaN","RangeError","token","formatStr"],"sources":["C:/Users/mkane/Downloads/NFLPredictions/nfl-predictions/node_modules/date-fns/formatRelative.js"],"sourcesContent":["import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { format } from \"./format.js\";\n\n/**\n * The {@link formatRelative} function options.\n */\n\n/**\n * @name formatRelative\n * @category Common Helpers\n * @summary Represent the date in words relative to the given base date.\n *\n * @description\n * Represent the date in words relative to the given base date.\n *\n * | Distance to the base date | Result                    |\n * |---------------------------|---------------------------|\n * | Previous 6 days           | last Sunday at 04:30 AM   |\n * | Last day                  | yesterday at 04:30 AM     |\n * | Same day                  | today at 04:30 AM         |\n * | Next day                  | tomorrow at 04:30 AM      |\n * | Next 6 days               | Sunday at 04:30 AM        |\n * | Other                     | 12/31/2017                |\n *\n * @param date - The date to format\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The date in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws `options.locale` must contain `formatRelative` property\n *\n * @example\n * // Represent the date of 6 days ago in words relative to the given base date. In this example, today is Wednesday\n * const result = formatRelative(subDays(new Date(), 6), new Date())\n * //=> \"last Thursday at 12:45 AM\"\n */\nexport function formatRelative(date, baseDate, options) {\n  const [date_, baseDate_] = normalizeDates(options?.in, date, baseDate);\n\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const diff = differenceInCalendarDays(date_, baseDate_);\n\n  if (isNaN(diff)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let token;\n  if (diff < -6) {\n    token = \"other\";\n  } else if (diff < -1) {\n    token = \"lastWeek\";\n  } else if (diff < 0) {\n    token = \"yesterday\";\n  } else if (diff < 1) {\n    token = \"today\";\n  } else if (diff < 2) {\n    token = \"tomorrow\";\n  } else if (diff < 7) {\n    token = \"nextWeek\";\n  } else {\n    token = \"other\";\n  }\n\n  const formatStr = locale.formatRelative(token, date_, baseDate_, {\n    locale,\n    weekStartsOn,\n  });\n  return format(date_, formatStr, { locale, weekStartsOn });\n}\n\n// Fallback for modularized imports:\nexport default formatRelative;\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,yBAA9B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,wBAAT,QAAyC,+BAAzC;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,QAA9B,EAAwCC,OAAxC,EAAiD;EACtD,MAAM,CAACC,KAAD,EAAQC,SAAR,IAAqBR,cAAc,CAACM,OAAO,EAAEG,EAAV,EAAcL,IAAd,EAAoBC,QAApB,CAAzC;EAEA,MAAMK,cAAc,GAAGX,iBAAiB,EAAxC;EACA,MAAMY,MAAM,GAAGL,OAAO,EAAEK,MAAT,IAAmBD,cAAc,CAACC,MAAlC,IAA4Cb,aAA3D;EACA,MAAMc,YAAY,GAChBN,OAAO,EAAEM,YAAT,IACAN,OAAO,EAAEK,MAAT,EAAiBL,OAAjB,EAA0BM,YAD1B,IAEAF,cAAc,CAACE,YAFf,IAGAF,cAAc,CAACC,MAAf,EAAuBL,OAAvB,EAAgCM,YAHhC,IAIA,CALF;EAOA,MAAMC,IAAI,GAAGZ,wBAAwB,CAACM,KAAD,EAAQC,SAAR,CAArC;;EAEA,IAAIM,KAAK,CAACD,IAAD,CAAT,EAAiB;IACf,MAAM,IAAIE,UAAJ,CAAe,oBAAf,CAAN;EACD;;EAED,IAAIC,KAAJ;;EACA,IAAIH,IAAI,GAAG,CAAC,CAAZ,EAAe;IACbG,KAAK,GAAG,OAAR;EACD,CAFD,MAEO,IAAIH,IAAI,GAAG,CAAC,CAAZ,EAAe;IACpBG,KAAK,GAAG,UAAR;EACD,CAFM,MAEA,IAAIH,IAAI,GAAG,CAAX,EAAc;IACnBG,KAAK,GAAG,WAAR;EACD,CAFM,MAEA,IAAIH,IAAI,GAAG,CAAX,EAAc;IACnBG,KAAK,GAAG,OAAR;EACD,CAFM,MAEA,IAAIH,IAAI,GAAG,CAAX,EAAc;IACnBG,KAAK,GAAG,UAAR;EACD,CAFM,MAEA,IAAIH,IAAI,GAAG,CAAX,EAAc;IACnBG,KAAK,GAAG,UAAR;EACD,CAFM,MAEA;IACLA,KAAK,GAAG,OAAR;EACD;;EAED,MAAMC,SAAS,GAAGN,MAAM,CAACR,cAAP,CAAsBa,KAAtB,EAA6BT,KAA7B,EAAoCC,SAApC,EAA+C;IAC/DG,MAD+D;IAE/DC;EAF+D,CAA/C,CAAlB;EAIA,OAAOV,MAAM,CAACK,KAAD,EAAQU,SAAR,EAAmB;IAAEN,MAAF;IAAUC;EAAV,CAAnB,CAAb;AACD,C,CAED;;AACA,eAAeT,cAAf","ignoreList":[]},"metadata":{},"sourceType":"module"}