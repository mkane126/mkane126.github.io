{"ast":null,"code":"import { constructFrom } from \"../../../constructFrom.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { timezonePatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\nimport { parseTimezonePattern } from \"../utils.js\"; // Timezone (ISO-8601)\n\nexport class ISOTimezoneParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"x\":\n        return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);\n\n      case \"xx\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n\n      case \"xxxx\":\n        return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);\n\n      case \"xxxxx\":\n        return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);\n\n      case \"xxx\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(date, date.getTime() - getTimezoneOffsetInMilliseconds(date) - value);\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"X\"];\n}","map":{"version":3,"names":["constructFrom","getTimezoneOffsetInMilliseconds","timezonePatterns","Parser","parseTimezonePattern","ISOTimezoneParser","priority","parse","dateString","token","basicOptionalMinutes","basic","basicOptionalSeconds","extendedOptionalSeconds","extended","set","date","flags","value","timestampIsSet","getTime","incompatibleTokens"],"sources":["C:/Users/mkane/Downloads/NFLPredictions/nfl-predictions/node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.js"],"sourcesContent":["import { constructFrom } from \"../../../constructFrom.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { timezonePatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseTimezonePattern } from \"../utils.js\";\n\n// Timezone (ISO-8601)\nexport class ISOTimezoneParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"x\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"xx\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"xxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"xxxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"xxx\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"X\"];\n}\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,+BAAT,QAAgD,kDAAhD;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,SAASC,oBAAT,QAAqC,aAArC,C,CAEA;;AACA,OAAO,MAAMC,iBAAN,SAAgCF,MAAhC,CAAuC;EAC5CG,QAAQ,GAAG,EAAH;;EAERC,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoB;IACvB,QAAQA,KAAR;MACE,KAAK,GAAL;QACE,OAAOL,oBAAoB,CACzBF,gBAAgB,CAACQ,oBADQ,EAEzBF,UAFyB,CAA3B;;MAIF,KAAK,IAAL;QACE,OAAOJ,oBAAoB,CAACF,gBAAgB,CAACS,KAAlB,EAAyBH,UAAzB,CAA3B;;MACF,KAAK,MAAL;QACE,OAAOJ,oBAAoB,CACzBF,gBAAgB,CAACU,oBADQ,EAEzBJ,UAFyB,CAA3B;;MAIF,KAAK,OAAL;QACE,OAAOJ,oBAAoB,CACzBF,gBAAgB,CAACW,uBADQ,EAEzBL,UAFyB,CAA3B;;MAIF,KAAK,KAAL;MACA;QACE,OAAOJ,oBAAoB,CAACF,gBAAgB,CAACY,QAAlB,EAA4BN,UAA5B,CAA3B;IApBJ;EAsBD;;EAEDO,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,KAAd,EAAqB;IACtB,IAAID,KAAK,CAACE,cAAV,EAA0B,OAAOH,IAAP;IAC1B,OAAOhB,aAAa,CAClBgB,IADkB,EAElBA,IAAI,CAACI,OAAL,KAAiBnB,+BAA+B,CAACe,IAAD,CAAhD,GAAyDE,KAFvC,CAApB;EAID;;EAEDG,kBAAkB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAH;AApC0B","ignoreList":[]},"metadata":{},"sourceType":"module"}