{"ast":null,"code":"import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { eachDayOfInterval } from \"./eachDayOfInterval.js\";\nimport { isWeekend } from \"./isWeekend.js\";\n/**\n * The {@link eachWeekendOfInterval} function options.\n */\n\n/**\n * The {@link eachWeekendOfInterval} function result type.\n */\n\n/**\n * @name eachWeekendOfInterval\n * @category Interval Helpers\n * @summary List all the Saturdays and Sundays in the given date interval.\n *\n * @description\n * Get all the Saturdays and Sundays in the given date interval.\n *\n * @typeParam IntervalType - Interval type.\n * @typeParam Options - Options type.\n *\n * @param interval - The given interval\n * @param options - An object with options\n *\n * @returns An array containing all the Saturdays and Sundays\n *\n * @example\n * // Lists all Saturdays and Sundays in the given date interval\n * const result = eachWeekendOfInterval({\n *   start: new Date(2018, 8, 17),\n *   end: new Date(2018, 8, 30)\n * })\n * //=> [\n * //   Sat Sep 22 2018 00:00:00,\n * //   Sun Sep 23 2018 00:00:00,\n * //   Sat Sep 29 2018 00:00:00,\n * //   Sun Sep 30 2018 00:00:00\n * // ]\n */\n\nexport function eachWeekendOfInterval(interval, options) {\n  const {\n    start,\n    end\n  } = normalizeInterval(options?.in, interval);\n  const dateInterval = eachDayOfInterval({\n    start,\n    end\n  }, options);\n  const weekends = [];\n  let index = 0;\n\n  while (index < dateInterval.length) {\n    const date = dateInterval[index++];\n    if (isWeekend(date)) weekends.push(constructFrom(start, date));\n  }\n\n  return weekends;\n} // Fallback for modularized imports:\n\nexport default eachWeekendOfInterval;","map":{"version":3,"names":["normalizeInterval","constructFrom","eachDayOfInterval","isWeekend","eachWeekendOfInterval","interval","options","start","end","in","dateInterval","weekends","index","length","date","push"],"sources":["C:/Users/mkane/Downloads/NFLPredictions/nfl-predictions/node_modules/date-fns/eachWeekendOfInterval.js"],"sourcesContent":["import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { eachDayOfInterval } from \"./eachDayOfInterval.js\";\nimport { isWeekend } from \"./isWeekend.js\";\n\n/**\n * The {@link eachWeekendOfInterval} function options.\n */\n\n/**\n * The {@link eachWeekendOfInterval} function result type.\n */\n\n/**\n * @name eachWeekendOfInterval\n * @category Interval Helpers\n * @summary List all the Saturdays and Sundays in the given date interval.\n *\n * @description\n * Get all the Saturdays and Sundays in the given date interval.\n *\n * @typeParam IntervalType - Interval type.\n * @typeParam Options - Options type.\n *\n * @param interval - The given interval\n * @param options - An object with options\n *\n * @returns An array containing all the Saturdays and Sundays\n *\n * @example\n * // Lists all Saturdays and Sundays in the given date interval\n * const result = eachWeekendOfInterval({\n *   start: new Date(2018, 8, 17),\n *   end: new Date(2018, 8, 30)\n * })\n * //=> [\n * //   Sat Sep 22 2018 00:00:00,\n * //   Sun Sep 23 2018 00:00:00,\n * //   Sat Sep 29 2018 00:00:00,\n * //   Sun Sep 30 2018 00:00:00\n * // ]\n */\nexport function eachWeekendOfInterval(interval, options) {\n  const { start, end } = normalizeInterval(options?.in, interval);\n  const dateInterval = eachDayOfInterval({ start, end }, options);\n  const weekends = [];\n  let index = 0;\n  while (index < dateInterval.length) {\n    const date = dateInterval[index++];\n    if (isWeekend(date)) weekends.push(constructFrom(start, date));\n  }\n  return weekends;\n}\n\n// Fallback for modularized imports:\nexport default eachWeekendOfInterval;\n"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,6BAAlC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,QAA/B,EAAyCC,OAAzC,EAAkD;EACvD,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAiBR,iBAAiB,CAACM,OAAO,EAAEG,EAAV,EAAcJ,QAAd,CAAxC;EACA,MAAMK,YAAY,GAAGR,iBAAiB,CAAC;IAAEK,KAAF;IAASC;EAAT,CAAD,EAAiBF,OAAjB,CAAtC;EACA,MAAMK,QAAQ,GAAG,EAAjB;EACA,IAAIC,KAAK,GAAG,CAAZ;;EACA,OAAOA,KAAK,GAAGF,YAAY,CAACG,MAA5B,EAAoC;IAClC,MAAMC,IAAI,GAAGJ,YAAY,CAACE,KAAK,EAAN,CAAzB;IACA,IAAIT,SAAS,CAACW,IAAD,CAAb,EAAqBH,QAAQ,CAACI,IAAT,CAAcd,aAAa,CAACM,KAAD,EAAQO,IAAR,CAA3B;EACtB;;EACD,OAAOH,QAAP;AACD,C,CAED;;AACA,eAAeP,qBAAf","ignoreList":[]},"metadata":{},"sourceType":"module"}