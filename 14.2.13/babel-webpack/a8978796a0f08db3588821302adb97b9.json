{"ast":null,"code":"import { constructNow } from \"./constructNow.js\";\n/**\n * The {@link endOfTomorrow} function options.\n */\n\n/**\n * @name endOfTomorrow\n * @category Day Helpers\n * @summary Return the end of tomorrow.\n * @pure false\n *\n * @description\n * Return the end of tomorrow.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param options - The options\n * @returns The end of tomorrow\n *\n * @example\n * // If today is 6 October 2014:\n * const result = endOfTomorrow()\n * //=> Tue Oct 7 2014 23:59:59.999\n */\n\nexport function endOfTomorrow(options) {\n  const now = constructNow(options?.in);\n  const year = now.getFullYear();\n  const month = now.getMonth();\n  const day = now.getDate();\n  const date = constructNow(options?.in);\n  date.setFullYear(year, month, day + 1);\n  date.setHours(23, 59, 59, 999);\n  return options?.in ? options.in(date) : date;\n} // Fallback for modularized imports:\n\nexport default endOfTomorrow;","map":{"version":3,"names":["constructNow","endOfTomorrow","options","now","in","year","getFullYear","month","getMonth","day","getDate","date","setFullYear","setHours"],"sources":["C:/Users/mkane/Downloads/NFLPredictions/nfl-predictions/node_modules/date-fns/endOfTomorrow.js"],"sourcesContent":["import { constructNow } from \"./constructNow.js\";\n\n/**\n * The {@link endOfTomorrow} function options.\n */\n\n/**\n * @name endOfTomorrow\n * @category Day Helpers\n * @summary Return the end of tomorrow.\n * @pure false\n *\n * @description\n * Return the end of tomorrow.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param options - The options\n * @returns The end of tomorrow\n *\n * @example\n * // If today is 6 October 2014:\n * const result = endOfTomorrow()\n * //=> Tue Oct 7 2014 23:59:59.999\n */\nexport function endOfTomorrow(options) {\n  const now = constructNow(options?.in);\n  const year = now.getFullYear();\n  const month = now.getMonth();\n  const day = now.getDate();\n\n  const date = constructNow(options?.in);\n  date.setFullYear(year, month, day + 1);\n  date.setHours(23, 59, 59, 999);\n  return options?.in ? options.in(date) : date;\n}\n\n// Fallback for modularized imports:\nexport default endOfTomorrow;\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,mBAA7B;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;EACrC,MAAMC,GAAG,GAAGH,YAAY,CAACE,OAAO,EAAEE,EAAV,CAAxB;EACA,MAAMC,IAAI,GAAGF,GAAG,CAACG,WAAJ,EAAb;EACA,MAAMC,KAAK,GAAGJ,GAAG,CAACK,QAAJ,EAAd;EACA,MAAMC,GAAG,GAAGN,GAAG,CAACO,OAAJ,EAAZ;EAEA,MAAMC,IAAI,GAAGX,YAAY,CAACE,OAAO,EAAEE,EAAV,CAAzB;EACAO,IAAI,CAACC,WAAL,CAAiBP,IAAjB,EAAuBE,KAAvB,EAA8BE,GAAG,GAAG,CAApC;EACAE,IAAI,CAACE,QAAL,CAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,GAA1B;EACA,OAAOX,OAAO,EAAEE,EAAT,GAAcF,OAAO,CAACE,EAAR,CAAWO,IAAX,CAAd,GAAiCA,IAAxC;AACD,C,CAED;;AACA,eAAeV,aAAf","ignoreList":[]},"metadata":{},"sourceType":"module"}