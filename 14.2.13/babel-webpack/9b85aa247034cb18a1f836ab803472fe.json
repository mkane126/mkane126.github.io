{"ast":null,"code":"import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\nimport { add } from \"./add.js\";\nimport { differenceInDays } from \"./differenceInDays.js\";\nimport { differenceInHours } from \"./differenceInHours.js\";\nimport { differenceInMinutes } from \"./differenceInMinutes.js\";\nimport { differenceInMonths } from \"./differenceInMonths.js\";\nimport { differenceInSeconds } from \"./differenceInSeconds.js\";\nimport { differenceInYears } from \"./differenceInYears.js\";\n/**\n * The {@link intervalToDuration} function options.\n */\n\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert an interval object to a duration object.\n *\n * @param interval - The interval to convert to duration\n * @param options - The context options\n *\n * @returns The duration object\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * });\n * //=> { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport function intervalToDuration(interval, options) {\n  const {\n    start,\n    end\n  } = normalizeInterval(options?.in, interval);\n  const duration = {};\n  const years = differenceInYears(end, start);\n  if (years) duration.years = years;\n  const remainingMonths = add(start, {\n    years: duration.years\n  });\n  const months = differenceInMonths(end, remainingMonths);\n  if (months) duration.months = months;\n  const remainingDays = add(remainingMonths, {\n    months: duration.months\n  });\n  const days = differenceInDays(end, remainingDays);\n  if (days) duration.days = days;\n  const remainingHours = add(remainingDays, {\n    days: duration.days\n  });\n  const hours = differenceInHours(end, remainingHours);\n  if (hours) duration.hours = hours;\n  const remainingMinutes = add(remainingHours, {\n    hours: duration.hours\n  });\n  const minutes = differenceInMinutes(end, remainingMinutes);\n  if (minutes) duration.minutes = minutes;\n  const remainingSeconds = add(remainingMinutes, {\n    minutes: duration.minutes\n  });\n  const seconds = differenceInSeconds(end, remainingSeconds);\n  if (seconds) duration.seconds = seconds;\n  return duration;\n} // Fallback for modularized imports:\n\nexport default intervalToDuration;","map":{"version":3,"names":["normalizeInterval","add","differenceInDays","differenceInHours","differenceInMinutes","differenceInMonths","differenceInSeconds","differenceInYears","intervalToDuration","interval","options","start","end","in","duration","years","remainingMonths","months","remainingDays","days","remainingHours","hours","remainingMinutes","minutes","remainingSeconds","seconds"],"sources":["C:/Users/mkane/Downloads/NFLPredictions/nfl-predictions/node_modules/date-fns/intervalToDuration.js"],"sourcesContent":["import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\nimport { add } from \"./add.js\";\nimport { differenceInDays } from \"./differenceInDays.js\";\nimport { differenceInHours } from \"./differenceInHours.js\";\nimport { differenceInMinutes } from \"./differenceInMinutes.js\";\nimport { differenceInMonths } from \"./differenceInMonths.js\";\nimport { differenceInSeconds } from \"./differenceInSeconds.js\";\nimport { differenceInYears } from \"./differenceInYears.js\";\n\n/**\n * The {@link intervalToDuration} function options.\n */\n\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert an interval object to a duration object.\n *\n * @param interval - The interval to convert to duration\n * @param options - The context options\n *\n * @returns The duration object\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * });\n * //=> { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\nexport function intervalToDuration(interval, options) {\n  const { start, end } = normalizeInterval(options?.in, interval);\n  const duration = {};\n\n  const years = differenceInYears(end, start);\n  if (years) duration.years = years;\n\n  const remainingMonths = add(start, { years: duration.years });\n  const months = differenceInMonths(end, remainingMonths);\n  if (months) duration.months = months;\n\n  const remainingDays = add(remainingMonths, { months: duration.months });\n  const days = differenceInDays(end, remainingDays);\n  if (days) duration.days = days;\n\n  const remainingHours = add(remainingDays, { days: duration.days });\n  const hours = differenceInHours(end, remainingHours);\n  if (hours) duration.hours = hours;\n\n  const remainingMinutes = add(remainingHours, { hours: duration.hours });\n  const minutes = differenceInMinutes(end, remainingMinutes);\n  if (minutes) duration.minutes = minutes;\n\n  const remainingSeconds = add(remainingMinutes, { minutes: duration.minutes });\n  const seconds = differenceInSeconds(end, remainingSeconds);\n  if (seconds) duration.seconds = seconds;\n\n  return duration;\n}\n\n// Fallback for modularized imports:\nexport default intervalToDuration;\n"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,6BAAlC;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA4BC,QAA5B,EAAsCC,OAAtC,EAA+C;EACpD,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAiBZ,iBAAiB,CAACU,OAAO,EAAEG,EAAV,EAAcJ,QAAd,CAAxC;EACA,MAAMK,QAAQ,GAAG,EAAjB;EAEA,MAAMC,KAAK,GAAGR,iBAAiB,CAACK,GAAD,EAAMD,KAAN,CAA/B;EACA,IAAII,KAAJ,EAAWD,QAAQ,CAACC,KAAT,GAAiBA,KAAjB;EAEX,MAAMC,eAAe,GAAGf,GAAG,CAACU,KAAD,EAAQ;IAAEI,KAAK,EAAED,QAAQ,CAACC;EAAlB,CAAR,CAA3B;EACA,MAAME,MAAM,GAAGZ,kBAAkB,CAACO,GAAD,EAAMI,eAAN,CAAjC;EACA,IAAIC,MAAJ,EAAYH,QAAQ,CAACG,MAAT,GAAkBA,MAAlB;EAEZ,MAAMC,aAAa,GAAGjB,GAAG,CAACe,eAAD,EAAkB;IAAEC,MAAM,EAAEH,QAAQ,CAACG;EAAnB,CAAlB,CAAzB;EACA,MAAME,IAAI,GAAGjB,gBAAgB,CAACU,GAAD,EAAMM,aAAN,CAA7B;EACA,IAAIC,IAAJ,EAAUL,QAAQ,CAACK,IAAT,GAAgBA,IAAhB;EAEV,MAAMC,cAAc,GAAGnB,GAAG,CAACiB,aAAD,EAAgB;IAAEC,IAAI,EAAEL,QAAQ,CAACK;EAAjB,CAAhB,CAA1B;EACA,MAAME,KAAK,GAAGlB,iBAAiB,CAACS,GAAD,EAAMQ,cAAN,CAA/B;EACA,IAAIC,KAAJ,EAAWP,QAAQ,CAACO,KAAT,GAAiBA,KAAjB;EAEX,MAAMC,gBAAgB,GAAGrB,GAAG,CAACmB,cAAD,EAAiB;IAAEC,KAAK,EAAEP,QAAQ,CAACO;EAAlB,CAAjB,CAA5B;EACA,MAAME,OAAO,GAAGnB,mBAAmB,CAACQ,GAAD,EAAMU,gBAAN,CAAnC;EACA,IAAIC,OAAJ,EAAaT,QAAQ,CAACS,OAAT,GAAmBA,OAAnB;EAEb,MAAMC,gBAAgB,GAAGvB,GAAG,CAACqB,gBAAD,EAAmB;IAAEC,OAAO,EAAET,QAAQ,CAACS;EAApB,CAAnB,CAA5B;EACA,MAAME,OAAO,GAAGnB,mBAAmB,CAACM,GAAD,EAAMY,gBAAN,CAAnC;EACA,IAAIC,OAAJ,EAAaX,QAAQ,CAACW,OAAT,GAAmBA,OAAnB;EAEb,OAAOX,QAAP;AACD,C,CAED;;AACA,eAAeN,kBAAf","ignoreList":[]},"metadata":{},"sourceType":"module"}