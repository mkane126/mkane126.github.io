{"ast":null,"code":"import { toDate } from \"./toDate.js\";\n/**\n * The {@link isWithinInterval} function options.\n */\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * @param date - The date to check\n * @param interval - The interval to check\n * @param options - An object with options\n *\n * @returns The date is within the interval\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * // => true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * // => false\n *\n * @example\n * // For date equal to the interval start:\n * isWithinInterval(date, { start, end: date })\n * // => true\n *\n * @example\n * // For date equal to the interval end:\n * isWithinInterval(date, { start: date, end })\n * // => true\n */\n\nexport function isWithinInterval(date, interval, options) {\n  const time = +toDate(date, options?.in);\n  const [startTime, endTime] = [+toDate(interval.start, options?.in), +toDate(interval.end, options?.in)].sort((a, b) => a - b);\n  return time >= startTime && time <= endTime;\n} // Fallback for modularized imports:\n\nexport default isWithinInterval;","map":{"version":3,"names":["toDate","isWithinInterval","date","interval","options","time","in","startTime","endTime","start","end","sort","a","b"],"sources":["C:/Users/mkane/Downloads/NFLPredictions/nfl-predictions/node_modules/date-fns/isWithinInterval.js"],"sourcesContent":["import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link isWithinInterval} function options.\n */\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * @param date - The date to check\n * @param interval - The interval to check\n * @param options - An object with options\n *\n * @returns The date is within the interval\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * // => true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * // => false\n *\n * @example\n * // For date equal to the interval start:\n * isWithinInterval(date, { start, end: date })\n * // => true\n *\n * @example\n * // For date equal to the interval end:\n * isWithinInterval(date, { start: date, end })\n * // => true\n */\nexport function isWithinInterval(date, interval, options) {\n  const time = +toDate(date, options?.in);\n  const [startTime, endTime] = [\n    +toDate(interval.start, options?.in),\n    +toDate(interval.end, options?.in),\n  ].sort((a, b) => a - b);\n\n  return time >= startTime && time <= endTime;\n}\n\n// Fallback for modularized imports:\nexport default isWithinInterval;\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,aAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,QAAhC,EAA0CC,OAA1C,EAAmD;EACxD,MAAMC,IAAI,GAAG,CAACL,MAAM,CAACE,IAAD,EAAOE,OAAO,EAAEE,EAAhB,CAApB;EACA,MAAM,CAACC,SAAD,EAAYC,OAAZ,IAAuB,CAC3B,CAACR,MAAM,CAACG,QAAQ,CAACM,KAAV,EAAiBL,OAAO,EAAEE,EAA1B,CADoB,EAE3B,CAACN,MAAM,CAACG,QAAQ,CAACO,GAAV,EAAeN,OAAO,EAAEE,EAAxB,CAFoB,EAG3BK,IAH2B,CAGtB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAHQ,CAA7B;EAKA,OAAOR,IAAI,IAAIE,SAAR,IAAqBF,IAAI,IAAIG,OAApC;AACD,C,CAED;;AACA,eAAeP,gBAAf","ignoreList":[]},"metadata":{},"sourceType":"module"}