{"ast":null,"code":"import { addLeadingZeros } from \"./_lib/addLeadingZeros.js\";\nimport { isValid } from \"./isValid.js\";\nimport { toDate } from \"./toDate.js\";\n/**\n * The {@link formatISO9075} function options.\n */\n\n/**\n * @name formatISO9075\n * @category Common Helpers\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\n *\n * @description\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18 19:00:52'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075, short format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918 190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, date only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, time only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52'\n */\n\nexport function formatISO9075(date, options) {\n  const date_ = toDate(date, options?.in);\n\n  if (!isValid(date_)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n  let result = \"\";\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\"; // Representation is either 'date' or 'complete'\n\n  if (representation !== \"time\") {\n    const day = addLeadingZeros(date_.getDate(), 2);\n    const month = addLeadingZeros(date_.getMonth() + 1, 2);\n    const year = addLeadingZeros(date_.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== \"date\") {\n    const hour = addLeadingZeros(date_.getHours(), 2);\n    const minute = addLeadingZeros(date_.getMinutes(), 2);\n    const second = addLeadingZeros(date_.getSeconds(), 2); // If there's also date, separate it with time with a space\n\n    const separator = result === \"\" ? \"\" : \" \"; // HHmmss or HH:mm:ss.\n\n    result = `${result}${separator}${hour}${timeDelimiter}${minute}${timeDelimiter}${second}`;\n  }\n\n  return result;\n} // Fallback for modularized imports:\n\nexport default formatISO9075;","map":{"version":3,"names":["addLeadingZeros","isValid","toDate","formatISO9075","date","options","date_","in","RangeError","format","representation","result","dateDelimiter","timeDelimiter","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","separator"],"sources":["C:/Users/mkane/Downloads/NFLPredictions/nfl-predictions/node_modules/date-fns/formatISO9075.js"],"sourcesContent":["import { addLeadingZeros } from \"./_lib/addLeadingZeros.js\";\nimport { isValid } from \"./isValid.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link formatISO9075} function options.\n */\n\n/**\n * @name formatISO9075\n * @category Common Helpers\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\n *\n * @description\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18 19:00:52'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075, short format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918 190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, date only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, time only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52'\n */\nexport function formatISO9075(date, options) {\n  const date_ = toDate(date, options?.in);\n\n  if (!isValid(date_)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n\n  let result = \"\";\n\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== \"time\") {\n    const day = addLeadingZeros(date_.getDate(), 2);\n    const month = addLeadingZeros(date_.getMonth() + 1, 2);\n    const year = addLeadingZeros(date_.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== \"date\") {\n    const hour = addLeadingZeros(date_.getHours(), 2);\n    const minute = addLeadingZeros(date_.getMinutes(), 2);\n    const second = addLeadingZeros(date_.getSeconds(), 2);\n\n    // If there's also date, separate it with time with a space\n    const separator = result === \"\" ? \"\" : \" \";\n\n    // HHmmss or HH:mm:ss.\n    result = `${result}${separator}${hour}${timeDelimiter}${minute}${timeDelimiter}${second}`;\n  }\n\n  return result;\n}\n\n// Fallback for modularized imports:\nexport default formatISO9075;\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,2BAAhC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsC;EAC3C,MAAMC,KAAK,GAAGJ,MAAM,CAACE,IAAD,EAAOC,OAAO,EAAEE,EAAhB,CAApB;;EAEA,IAAI,CAACN,OAAO,CAACK,KAAD,CAAZ,EAAqB;IACnB,MAAM,IAAIE,UAAJ,CAAe,oBAAf,CAAN;EACD;;EAED,MAAMC,MAAM,GAAGJ,OAAO,EAAEI,MAAT,IAAmB,UAAlC;EACA,MAAMC,cAAc,GAAGL,OAAO,EAAEK,cAAT,IAA2B,UAAlD;EAEA,IAAIC,MAAM,GAAG,EAAb;EAEA,MAAMC,aAAa,GAAGH,MAAM,KAAK,UAAX,GAAwB,GAAxB,GAA8B,EAApD;EACA,MAAMI,aAAa,GAAGJ,MAAM,KAAK,UAAX,GAAwB,GAAxB,GAA8B,EAApD,CAb2C,CAe3C;;EACA,IAAIC,cAAc,KAAK,MAAvB,EAA+B;IAC7B,MAAMI,GAAG,GAAGd,eAAe,CAACM,KAAK,CAACS,OAAN,EAAD,EAAkB,CAAlB,CAA3B;IACA,MAAMC,KAAK,GAAGhB,eAAe,CAACM,KAAK,CAACW,QAAN,KAAmB,CAApB,EAAuB,CAAvB,CAA7B;IACA,MAAMC,IAAI,GAAGlB,eAAe,CAACM,KAAK,CAACa,WAAN,EAAD,EAAsB,CAAtB,CAA5B,CAH6B,CAK7B;;IACAR,MAAM,GAAI,GAAEO,IAAK,GAAEN,aAAc,GAAEI,KAAM,GAAEJ,aAAc,GAAEE,GAAI,EAA/D;EACD,CAvB0C,CAyB3C;;;EACA,IAAIJ,cAAc,KAAK,MAAvB,EAA+B;IAC7B,MAAMU,IAAI,GAAGpB,eAAe,CAACM,KAAK,CAACe,QAAN,EAAD,EAAmB,CAAnB,CAA5B;IACA,MAAMC,MAAM,GAAGtB,eAAe,CAACM,KAAK,CAACiB,UAAN,EAAD,EAAqB,CAArB,CAA9B;IACA,MAAMC,MAAM,GAAGxB,eAAe,CAACM,KAAK,CAACmB,UAAN,EAAD,EAAqB,CAArB,CAA9B,CAH6B,CAK7B;;IACA,MAAMC,SAAS,GAAGf,MAAM,KAAK,EAAX,GAAgB,EAAhB,GAAqB,GAAvC,CAN6B,CAQ7B;;IACAA,MAAM,GAAI,GAAEA,MAAO,GAAEe,SAAU,GAAEN,IAAK,GAAEP,aAAc,GAAES,MAAO,GAAET,aAAc,GAAEW,MAAO,EAAxF;EACD;;EAED,OAAOb,MAAP;AACD,C,CAED;;AACA,eAAeR,aAAf","ignoreList":[]},"metadata":{},"sourceType":"module"}