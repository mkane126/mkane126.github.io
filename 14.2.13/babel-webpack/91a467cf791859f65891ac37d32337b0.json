{"ast":null,"code":"import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\nimport { addMinutes } from \"./addMinutes.js\";\nimport { constructFrom } from \"./constructFrom.js\";\n/**\n * The {@link eachMinuteOfInterval} function options.\n */\n\n/**\n * The {@link eachMinuteOfInterval} function result type. It resolves the proper data type.\n * It uses the first argument date object type, starting from the date argument,\n * then the start interval date, and finally the end interval date. If\n * a context function is passed, it uses the context function return type.\n */\n\n/**\n * @name eachMinuteOfInterval\n * @category Interval Helpers\n * @summary Return the array of minutes within the specified time interval.\n *\n * @description\n * Returns the array of minutes within the specified time interval.\n *\n * @typeParam IntervalType - Interval type.\n * @typeParam Options - Options type.\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of minutes from the minute of the interval start to the minute of the interval end\n *\n * @example\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\n * const result = eachMinuteOfInterval({\n *   start: new Date(2014, 9, 14, 13),\n *   end: new Date(2014, 9, 14, 13, 3)\n * })\n * //=> [\n * //   Wed Oct 14 2014 13:00:00,\n * //   Wed Oct 14 2014 13:01:00,\n * //   Wed Oct 14 2014 13:02:00,\n * //   Wed Oct 14 2014 13:03:00\n * // ]\n */\n\nexport function eachMinuteOfInterval(interval, options) {\n  const {\n    start,\n    end\n  } = normalizeInterval(options?.in, interval); // Set to the start of the minute\n\n  start.setSeconds(0, 0);\n  let reversed = +start > +end;\n  const endTime = reversed ? +start : +end;\n  let date = reversed ? end : start;\n  let step = options?.step ?? 1;\n  if (!step) return [];\n\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+date <= endTime) {\n    dates.push(constructFrom(start, date));\n    date = addMinutes(date, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n} // Fallback for modularized imports:\n\nexport default eachMinuteOfInterval;","map":{"version":3,"names":["normalizeInterval","addMinutes","constructFrom","eachMinuteOfInterval","interval","options","start","end","in","setSeconds","reversed","endTime","date","step","dates","push","reverse"],"sources":["C:/Users/mkane/Downloads/NFLPredictions/nfl-predictions/node_modules/date-fns/eachMinuteOfInterval.js"],"sourcesContent":["import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\nimport { addMinutes } from \"./addMinutes.js\";\nimport { constructFrom } from \"./constructFrom.js\";\n\n/**\n * The {@link eachMinuteOfInterval} function options.\n */\n\n/**\n * The {@link eachMinuteOfInterval} function result type. It resolves the proper data type.\n * It uses the first argument date object type, starting from the date argument,\n * then the start interval date, and finally the end interval date. If\n * a context function is passed, it uses the context function return type.\n */\n\n/**\n * @name eachMinuteOfInterval\n * @category Interval Helpers\n * @summary Return the array of minutes within the specified time interval.\n *\n * @description\n * Returns the array of minutes within the specified time interval.\n *\n * @typeParam IntervalType - Interval type.\n * @typeParam Options - Options type.\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of minutes from the minute of the interval start to the minute of the interval end\n *\n * @example\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\n * const result = eachMinuteOfInterval({\n *   start: new Date(2014, 9, 14, 13),\n *   end: new Date(2014, 9, 14, 13, 3)\n * })\n * //=> [\n * //   Wed Oct 14 2014 13:00:00,\n * //   Wed Oct 14 2014 13:01:00,\n * //   Wed Oct 14 2014 13:02:00,\n * //   Wed Oct 14 2014 13:03:00\n * // ]\n */\nexport function eachMinuteOfInterval(interval, options) {\n  const { start, end } = normalizeInterval(options?.in, interval);\n  // Set to the start of the minute\n  start.setSeconds(0, 0);\n\n  let reversed = +start > +end;\n  const endTime = reversed ? +start : +end;\n  let date = reversed ? end : start;\n\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+date <= endTime) {\n    dates.push(constructFrom(start, date));\n    date = addMinutes(date, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}\n\n// Fallback for modularized imports:\nexport default eachMinuteOfInterval;\n"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,6BAAlC;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CAA8BC,QAA9B,EAAwCC,OAAxC,EAAiD;EACtD,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAiBP,iBAAiB,CAACK,OAAO,EAAEG,EAAV,EAAcJ,QAAd,CAAxC,CADsD,CAEtD;;EACAE,KAAK,CAACG,UAAN,CAAiB,CAAjB,EAAoB,CAApB;EAEA,IAAIC,QAAQ,GAAG,CAACJ,KAAD,GAAS,CAACC,GAAzB;EACA,MAAMI,OAAO,GAAGD,QAAQ,GAAG,CAACJ,KAAJ,GAAY,CAACC,GAArC;EACA,IAAIK,IAAI,GAAGF,QAAQ,GAAGH,GAAH,GAASD,KAA5B;EAEA,IAAIO,IAAI,GAAGR,OAAO,EAAEQ,IAAT,IAAiB,CAA5B;EACA,IAAI,CAACA,IAAL,EAAW,OAAO,EAAP;;EACX,IAAIA,IAAI,GAAG,CAAX,EAAc;IACZA,IAAI,GAAG,CAACA,IAAR;IACAH,QAAQ,GAAG,CAACA,QAAZ;EACD;;EAED,MAAMI,KAAK,GAAG,EAAd;;EAEA,OAAO,CAACF,IAAD,IAASD,OAAhB,EAAyB;IACvBG,KAAK,CAACC,IAAN,CAAWb,aAAa,CAACI,KAAD,EAAQM,IAAR,CAAxB;IACAA,IAAI,GAAGX,UAAU,CAACW,IAAD,EAAOC,IAAP,CAAjB;EACD;;EAED,OAAOH,QAAQ,GAAGI,KAAK,CAACE,OAAN,EAAH,GAAqBF,KAApC;AACD,C,CAED;;AACA,eAAeX,oBAAf","ignoreList":[]},"metadata":{},"sourceType":"module"}