{"ast":null,"code":"import { constructFrom } from \"./constructFrom.js\";\nimport { setMonth } from \"./setMonth.js\";\nimport { toDate } from \"./toDate.js\";\n/**\n * The {@link set} function options.\n */\n\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param values - The date values to be set\n * @param options - The options\n *\n * @returns The new date with options set\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\n\nexport function set(date, values, options) {\n  let _date = toDate(date, options?.in); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n\n  if (isNaN(+_date)) return constructFrom(options?.in || date, NaN);\n  if (values.year != null) _date.setFullYear(values.year);\n  if (values.month != null) _date = setMonth(_date, values.month);\n  if (values.date != null) _date.setDate(values.date);\n  if (values.hours != null) _date.setHours(values.hours);\n  if (values.minutes != null) _date.setMinutes(values.minutes);\n  if (values.seconds != null) _date.setSeconds(values.seconds);\n  if (values.milliseconds != null) _date.setMilliseconds(values.milliseconds);\n  return _date;\n} // Fallback for modularized imports:\n\nexport default set;","map":{"version":3,"names":["constructFrom","setMonth","toDate","set","date","values","options","_date","in","isNaN","NaN","year","setFullYear","month","setDate","hours","setHours","minutes","setMinutes","seconds","setSeconds","milliseconds","setMilliseconds"],"sources":["C:/Users/mkane/Downloads/NFLPredictions/nfl-predictions/node_modules/date-fns/set.js"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\nimport { setMonth } from \"./setMonth.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link set} function options.\n */\n\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param values - The date values to be set\n * @param options - The options\n *\n * @returns The new date with options set\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\nexport function set(date, values, options) {\n  let _date = toDate(date, options?.in);\n\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n  if (isNaN(+_date)) return constructFrom(options?.in || date, NaN);\n\n  if (values.year != null) _date.setFullYear(values.year);\n  if (values.month != null) _date = setMonth(_date, values.month);\n  if (values.date != null) _date.setDate(values.date);\n  if (values.hours != null) _date.setHours(values.hours);\n  if (values.minutes != null) _date.setMinutes(values.minutes);\n  if (values.seconds != null) _date.setSeconds(values.seconds);\n  if (values.milliseconds != null) _date.setMilliseconds(values.milliseconds);\n\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default set;\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,GAAT,CAAaC,IAAb,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoC;EACzC,IAAIC,KAAK,GAAGL,MAAM,CAACE,IAAD,EAAOE,OAAO,EAAEE,EAAhB,CAAlB,CADyC,CAGzC;;;EACA,IAAIC,KAAK,CAAC,CAACF,KAAF,CAAT,EAAmB,OAAOP,aAAa,CAACM,OAAO,EAAEE,EAAT,IAAeJ,IAAhB,EAAsBM,GAAtB,CAApB;EAEnB,IAAIL,MAAM,CAACM,IAAP,IAAe,IAAnB,EAAyBJ,KAAK,CAACK,WAAN,CAAkBP,MAAM,CAACM,IAAzB;EACzB,IAAIN,MAAM,CAACQ,KAAP,IAAgB,IAApB,EAA0BN,KAAK,GAAGN,QAAQ,CAACM,KAAD,EAAQF,MAAM,CAACQ,KAAf,CAAhB;EAC1B,IAAIR,MAAM,CAACD,IAAP,IAAe,IAAnB,EAAyBG,KAAK,CAACO,OAAN,CAAcT,MAAM,CAACD,IAArB;EACzB,IAAIC,MAAM,CAACU,KAAP,IAAgB,IAApB,EAA0BR,KAAK,CAACS,QAAN,CAAeX,MAAM,CAACU,KAAtB;EAC1B,IAAIV,MAAM,CAACY,OAAP,IAAkB,IAAtB,EAA4BV,KAAK,CAACW,UAAN,CAAiBb,MAAM,CAACY,OAAxB;EAC5B,IAAIZ,MAAM,CAACc,OAAP,IAAkB,IAAtB,EAA4BZ,KAAK,CAACa,UAAN,CAAiBf,MAAM,CAACc,OAAxB;EAC5B,IAAId,MAAM,CAACgB,YAAP,IAAuB,IAA3B,EAAiCd,KAAK,CAACe,eAAN,CAAsBjB,MAAM,CAACgB,YAA7B;EAEjC,OAAOd,KAAP;AACD,C,CAED;;AACA,eAAeJ,GAAf","ignoreList":[]},"metadata":{},"sourceType":"module"}