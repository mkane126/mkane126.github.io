{"ast":null,"code":"import { addLeadingZeros } from \"./_lib/addLeadingZeros.js\";\nimport { isValid } from \"./isValid.js\";\nimport { toDate } from \"./toDate.js\";\n/**\n * The {@link formatRFC3339} function options.\n */\n\n/**\n * @name formatRFC3339\n * @category Common Helpers\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n *\n * @description\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format:\n * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\n * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), {\n *   fractionDigits: 3\n * })\n * //=> '2019-09-18T19:00:52.234Z'\n */\n\nexport function formatRFC3339(date, options) {\n  const date_ = toDate(date, options?.in);\n\n  if (!isValid(date_)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const fractionDigits = options?.fractionDigits ?? 0;\n  const day = addLeadingZeros(date_.getDate(), 2);\n  const month = addLeadingZeros(date_.getMonth() + 1, 2);\n  const year = date_.getFullYear();\n  const hour = addLeadingZeros(date_.getHours(), 2);\n  const minute = addLeadingZeros(date_.getMinutes(), 2);\n  const second = addLeadingZeros(date_.getSeconds(), 2);\n  let fractionalSecond = \"\";\n\n  if (fractionDigits > 0) {\n    const milliseconds = date_.getMilliseconds();\n    const fractionalSeconds = Math.trunc(milliseconds * Math.pow(10, fractionDigits - 3));\n    fractionalSecond = \".\" + addLeadingZeros(fractionalSeconds, fractionDigits);\n  }\n\n  let offset = \"\";\n  const tzOffset = date_.getTimezoneOffset();\n\n  if (tzOffset !== 0) {\n    const absoluteOffset = Math.abs(tzOffset);\n    const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);\n    const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n    const sign = tzOffset < 0 ? \"+\" : \"-\";\n    offset = `${sign}${hourOffset}:${minuteOffset}`;\n  } else {\n    offset = \"Z\";\n  }\n\n  return `${year}-${month}-${day}T${hour}:${minute}:${second}${fractionalSecond}${offset}`;\n} // Fallback for modularized imports:\n\nexport default formatRFC3339;","map":{"version":3,"names":["addLeadingZeros","isValid","toDate","formatRFC3339","date","options","date_","in","RangeError","fractionDigits","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","fractionalSecond","milliseconds","getMilliseconds","fractionalSeconds","Math","trunc","pow","offset","tzOffset","getTimezoneOffset","absoluteOffset","abs","hourOffset","minuteOffset","sign"],"sources":["C:/Users/mkane/Downloads/NFLPredictions/nfl-predictions/node_modules/date-fns/formatRFC3339.js"],"sourcesContent":["import { addLeadingZeros } from \"./_lib/addLeadingZeros.js\";\nimport { isValid } from \"./isValid.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link formatRFC3339} function options.\n */\n\n/**\n * @name formatRFC3339\n * @category Common Helpers\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n *\n * @description\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format:\n * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\n * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), {\n *   fractionDigits: 3\n * })\n * //=> '2019-09-18T19:00:52.234Z'\n */\nexport function formatRFC3339(date, options) {\n  const date_ = toDate(date, options?.in);\n\n  if (!isValid(date_)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const fractionDigits = options?.fractionDigits ?? 0;\n\n  const day = addLeadingZeros(date_.getDate(), 2);\n  const month = addLeadingZeros(date_.getMonth() + 1, 2);\n  const year = date_.getFullYear();\n\n  const hour = addLeadingZeros(date_.getHours(), 2);\n  const minute = addLeadingZeros(date_.getMinutes(), 2);\n  const second = addLeadingZeros(date_.getSeconds(), 2);\n\n  let fractionalSecond = \"\";\n  if (fractionDigits > 0) {\n    const milliseconds = date_.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, fractionDigits - 3),\n    );\n    fractionalSecond = \".\" + addLeadingZeros(fractionalSeconds, fractionDigits);\n  }\n\n  let offset = \"\";\n  const tzOffset = date_.getTimezoneOffset();\n\n  if (tzOffset !== 0) {\n    const absoluteOffset = Math.abs(tzOffset);\n    const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);\n    const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);\n    // If less than 0, the sign is +, because it is ahead of time.\n    const sign = tzOffset < 0 ? \"+\" : \"-\";\n\n    offset = `${sign}${hourOffset}:${minuteOffset}`;\n  } else {\n    offset = \"Z\";\n  }\n\n  return `${year}-${month}-${day}T${hour}:${minute}:${second}${fractionalSecond}${offset}`;\n}\n\n// Fallback for modularized imports:\nexport default formatRFC3339;\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,2BAAhC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsC;EAC3C,MAAMC,KAAK,GAAGJ,MAAM,CAACE,IAAD,EAAOC,OAAO,EAAEE,EAAhB,CAApB;;EAEA,IAAI,CAACN,OAAO,CAACK,KAAD,CAAZ,EAAqB;IACnB,MAAM,IAAIE,UAAJ,CAAe,oBAAf,CAAN;EACD;;EAED,MAAMC,cAAc,GAAGJ,OAAO,EAAEI,cAAT,IAA2B,CAAlD;EAEA,MAAMC,GAAG,GAAGV,eAAe,CAACM,KAAK,CAACK,OAAN,EAAD,EAAkB,CAAlB,CAA3B;EACA,MAAMC,KAAK,GAAGZ,eAAe,CAACM,KAAK,CAACO,QAAN,KAAmB,CAApB,EAAuB,CAAvB,CAA7B;EACA,MAAMC,IAAI,GAAGR,KAAK,CAACS,WAAN,EAAb;EAEA,MAAMC,IAAI,GAAGhB,eAAe,CAACM,KAAK,CAACW,QAAN,EAAD,EAAmB,CAAnB,CAA5B;EACA,MAAMC,MAAM,GAAGlB,eAAe,CAACM,KAAK,CAACa,UAAN,EAAD,EAAqB,CAArB,CAA9B;EACA,MAAMC,MAAM,GAAGpB,eAAe,CAACM,KAAK,CAACe,UAAN,EAAD,EAAqB,CAArB,CAA9B;EAEA,IAAIC,gBAAgB,GAAG,EAAvB;;EACA,IAAIb,cAAc,GAAG,CAArB,EAAwB;IACtB,MAAMc,YAAY,GAAGjB,KAAK,CAACkB,eAAN,EAArB;IACA,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,KAAL,CACxBJ,YAAY,GAAGG,IAAI,CAACE,GAAL,CAAS,EAAT,EAAanB,cAAc,GAAG,CAA9B,CADS,CAA1B;IAGAa,gBAAgB,GAAG,MAAMtB,eAAe,CAACyB,iBAAD,EAAoBhB,cAApB,CAAxC;EACD;;EAED,IAAIoB,MAAM,GAAG,EAAb;EACA,MAAMC,QAAQ,GAAGxB,KAAK,CAACyB,iBAAN,EAAjB;;EAEA,IAAID,QAAQ,KAAK,CAAjB,EAAoB;IAClB,MAAME,cAAc,GAAGN,IAAI,CAACO,GAAL,CAASH,QAAT,CAAvB;IACA,MAAMI,UAAU,GAAGlC,eAAe,CAAC0B,IAAI,CAACC,KAAL,CAAWK,cAAc,GAAG,EAA5B,CAAD,EAAkC,CAAlC,CAAlC;IACA,MAAMG,YAAY,GAAGnC,eAAe,CAACgC,cAAc,GAAG,EAAlB,EAAsB,CAAtB,CAApC,CAHkB,CAIlB;;IACA,MAAMI,IAAI,GAAGN,QAAQ,GAAG,CAAX,GAAe,GAAf,GAAqB,GAAlC;IAEAD,MAAM,GAAI,GAAEO,IAAK,GAAEF,UAAW,IAAGC,YAAa,EAA9C;EACD,CARD,MAQO;IACLN,MAAM,GAAG,GAAT;EACD;;EAED,OAAQ,GAAEf,IAAK,IAAGF,KAAM,IAAGF,GAAI,IAAGM,IAAK,IAAGE,MAAO,IAAGE,MAAO,GAAEE,gBAAiB,GAAEO,MAAO,EAAvF;AACD,C,CAED;;AACA,eAAe1B,aAAf","ignoreList":[]},"metadata":{},"sourceType":"module"}