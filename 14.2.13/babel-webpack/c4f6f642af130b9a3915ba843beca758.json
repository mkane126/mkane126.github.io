{"ast":null,"code":"import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { startOfWeekYear } from \"./startOfWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n/**\n * The {@link setWeekYear} function options.\n */\n\n/**\n * @name setWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Set the local week-numbering year to the given date.\n *\n * @description\n * Set the local week-numbering year to the given date,\n * saving the week number and the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param weekYear - The local week-numbering year of the new date\n * @param options - An object with options\n *\n * @returns The new date with the local week-numbering year set\n *\n * @example\n * // Set the local week-numbering year 2004 to 2 January 2010 with default options:\n * const result = setWeekYear(new Date(2010, 0, 2), 2004)\n * //=> Sat Jan 03 2004 00:00:00\n *\n * @example\n * // Set the local week-numbering year 2004 to 2 January 2010,\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = setWeekYear(new Date(2010, 0, 2), 2004, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sat Jan 01 2005 00:00:00\n */\n\nexport function setWeekYear(date, weekYear, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate = options?.firstWeekContainsDate ?? options?.locale?.options?.firstWeekContainsDate ?? defaultOptions.firstWeekContainsDate ?? defaultOptions.locale?.options?.firstWeekContainsDate ?? 1;\n  const diff = differenceInCalendarDays(toDate(date, options?.in), startOfWeekYear(date, options), options);\n  const firstWeek = constructFrom(options?.in || date, 0);\n  firstWeek.setFullYear(weekYear, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const date_ = startOfWeekYear(firstWeek, options);\n  date_.setDate(date_.getDate() + diff);\n  return date_;\n} // Fallback for modularized imports:\n\nexport default setWeekYear;","map":{"version":3,"names":["getDefaultOptions","constructFrom","differenceInCalendarDays","startOfWeekYear","toDate","setWeekYear","date","weekYear","options","defaultOptions","firstWeekContainsDate","locale","diff","in","firstWeek","setFullYear","setHours","date_","setDate","getDate"],"sources":["C:/Users/mkane/Downloads/NFLPredictions/nfl-predictions/node_modules/date-fns/setWeekYear.js"],"sourcesContent":["import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { startOfWeekYear } from \"./startOfWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setWeekYear} function options.\n */\n\n/**\n * @name setWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Set the local week-numbering year to the given date.\n *\n * @description\n * Set the local week-numbering year to the given date,\n * saving the week number and the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param weekYear - The local week-numbering year of the new date\n * @param options - An object with options\n *\n * @returns The new date with the local week-numbering year set\n *\n * @example\n * // Set the local week-numbering year 2004 to 2 January 2010 with default options:\n * const result = setWeekYear(new Date(2010, 0, 2), 2004)\n * //=> Sat Jan 03 2004 00:00:00\n *\n * @example\n * // Set the local week-numbering year 2004 to 2 January 2010,\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = setWeekYear(new Date(2010, 0, 2), 2004, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sat Jan 01 2005 00:00:00\n */\nexport function setWeekYear(date, weekYear, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const diff = differenceInCalendarDays(\n    toDate(date, options?.in),\n    startOfWeekYear(date, options),\n    options,\n  );\n\n  const firstWeek = constructFrom(options?.in || date, 0);\n  firstWeek.setFullYear(weekYear, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n\n  const date_ = startOfWeekYear(firstWeek, options);\n  date_.setDate(date_.getDate() + diff);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default setWeekYear;\n"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,0BAAlC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,wBAAT,QAAyC,+BAAzC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,QAA3B,EAAqCC,OAArC,EAA8C;EACnD,MAAMC,cAAc,GAAGT,iBAAiB,EAAxC;EACA,MAAMU,qBAAqB,GACzBF,OAAO,EAAEE,qBAAT,IACAF,OAAO,EAAEG,MAAT,EAAiBH,OAAjB,EAA0BE,qBAD1B,IAEAD,cAAc,CAACC,qBAFf,IAGAD,cAAc,CAACE,MAAf,EAAuBH,OAAvB,EAAgCE,qBAHhC,IAIA,CALF;EAOA,MAAME,IAAI,GAAGV,wBAAwB,CACnCE,MAAM,CAACE,IAAD,EAAOE,OAAO,EAAEK,EAAhB,CAD6B,EAEnCV,eAAe,CAACG,IAAD,EAAOE,OAAP,CAFoB,EAGnCA,OAHmC,CAArC;EAMA,MAAMM,SAAS,GAAGb,aAAa,CAACO,OAAO,EAAEK,EAAT,IAAeP,IAAhB,EAAsB,CAAtB,CAA/B;EACAQ,SAAS,CAACC,WAAV,CAAsBR,QAAtB,EAAgC,CAAhC,EAAmCG,qBAAnC;EACAI,SAAS,CAACE,QAAV,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B;EAEA,MAAMC,KAAK,GAAGd,eAAe,CAACW,SAAD,EAAYN,OAAZ,CAA7B;EACAS,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,OAAN,KAAkBP,IAAhC;EACA,OAAOK,KAAP;AACD,C,CAED;;AACA,eAAeZ,WAAf","ignoreList":[]},"metadata":{},"sourceType":"module"}