{"ast":null,"code":"import { constructFrom } from \"./constructFrom.js\";\nimport { getDaysInMonth } from \"./getDaysInMonth.js\";\nimport { toDate } from \"./toDate.js\";\n/**\n * The {@link setMonth} function options.\n */\n\n/**\n * @name setMonth\n * @category Month Helpers\n * @summary Set the month to the given date.\n *\n * @description\n * Set the month to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param month - The month index to set (0-11)\n * @param options - The options\n *\n * @returns The new date with the month set\n *\n * @example\n * // Set February to 1 September 2014:\n * const result = setMonth(new Date(2014, 8, 1), 1)\n * //=> Sat Feb 01 2014 00:00:00\n */\n\nexport function setMonth(date, month, options) {\n  const _date = toDate(date, options?.in);\n\n  const year = _date.getFullYear();\n\n  const day = _date.getDate();\n\n  const midMonth = constructFrom(options?.in || date, 0);\n  midMonth.setFullYear(year, month, 15);\n  midMonth.setHours(0, 0, 0, 0);\n  const daysInMonth = getDaysInMonth(midMonth); // Set the earlier date, allows to wrap Jan 31 to Feb 28\n\n  _date.setMonth(month, Math.min(day, daysInMonth));\n\n  return _date;\n} // Fallback for modularized imports:\n\nexport default setMonth;","map":{"version":3,"names":["constructFrom","getDaysInMonth","toDate","setMonth","date","month","options","_date","in","year","getFullYear","day","getDate","midMonth","setFullYear","setHours","daysInMonth","Math","min"],"sources":["C:/Users/mkane/Downloads/NFLPredictions/nfl-predictions/node_modules/date-fns/setMonth.js"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\nimport { getDaysInMonth } from \"./getDaysInMonth.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setMonth} function options.\n */\n\n/**\n * @name setMonth\n * @category Month Helpers\n * @summary Set the month to the given date.\n *\n * @description\n * Set the month to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param month - The month index to set (0-11)\n * @param options - The options\n *\n * @returns The new date with the month set\n *\n * @example\n * // Set February to 1 September 2014:\n * const result = setMonth(new Date(2014, 8, 1), 1)\n * //=> Sat Feb 01 2014 00:00:00\n */\nexport function setMonth(date, month, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n  const day = _date.getDate();\n\n  const midMonth = constructFrom(options?.in || date, 0);\n  midMonth.setFullYear(year, month, 15);\n  midMonth.setHours(0, 0, 0, 0);\n  const daysInMonth = getDaysInMonth(midMonth);\n\n  // Set the earlier date, allows to wrap Jan 31 to Feb 28\n  _date.setMonth(month, Math.min(day, daysInMonth));\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default setMonth;\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,KAAxB,EAA+BC,OAA/B,EAAwC;EAC7C,MAAMC,KAAK,GAAGL,MAAM,CAACE,IAAD,EAAOE,OAAO,EAAEE,EAAhB,CAApB;;EACA,MAAMC,IAAI,GAAGF,KAAK,CAACG,WAAN,EAAb;;EACA,MAAMC,GAAG,GAAGJ,KAAK,CAACK,OAAN,EAAZ;;EAEA,MAAMC,QAAQ,GAAGb,aAAa,CAACM,OAAO,EAAEE,EAAT,IAAeJ,IAAhB,EAAsB,CAAtB,CAA9B;EACAS,QAAQ,CAACC,WAAT,CAAqBL,IAArB,EAA2BJ,KAA3B,EAAkC,EAAlC;EACAQ,QAAQ,CAACE,QAAT,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B;EACA,MAAMC,WAAW,GAAGf,cAAc,CAACY,QAAD,CAAlC,CAR6C,CAU7C;;EACAN,KAAK,CAACJ,QAAN,CAAeE,KAAf,EAAsBY,IAAI,CAACC,GAAL,CAASP,GAAT,EAAcK,WAAd,CAAtB;;EACA,OAAOT,KAAP;AACD,C,CAED;;AACA,eAAeJ,QAAf","ignoreList":[]},"metadata":{},"sourceType":"module"}