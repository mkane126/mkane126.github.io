{"ast":null,"code":"import { constructFrom } from \"./constructFrom.js\";\nimport { isSaturday } from \"./isSaturday.js\";\nimport { isSunday } from \"./isSunday.js\";\nimport { isWeekend } from \"./isWeekend.js\";\nimport { toDate } from \"./toDate.js\";\n/**\n * The {@link addBusinessDays} function options.\n */\n\n/**\n * @name addBusinessDays\n * @category Day Helpers\n * @summary Add the specified number of business days (mon - fri) to the given date.\n *\n * @description\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of business days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the business days added\n *\n * @example\n * // Add 10 business days to 1 September 2014:\n * const result = addBusinessDays(new Date(2014, 8, 1), 10)\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\n */\n\nexport function addBusinessDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n\n  const startedOnWeekend = isWeekend(_date, options);\n  if (isNaN(amount)) return constructFrom(options?.in, NaN);\n\n  const hours = _date.getHours();\n\n  const sign = amount < 0 ? -1 : 1;\n  const fullWeeks = Math.trunc(amount / 5);\n\n  _date.setDate(_date.getDate() + fullWeeks * 7); // Get remaining days not part of a full week\n\n\n  let restDays = Math.abs(amount % 5); // Loops over remaining days\n\n  while (restDays > 0) {\n    _date.setDate(_date.getDate() + sign);\n\n    if (!isWeekend(_date, options)) restDays -= 1;\n  } // If the date is a weekend day and we reduce a dividable of\n  // 5 from it, we land on a weekend date.\n  // To counter this, we add days accordingly to land on the next business day\n\n\n  if (startedOnWeekend && isWeekend(_date, options) && amount !== 0) {\n    // If we're reducing days, we want to add days until we land on a weekday\n    // If we're adding days we want to reduce days until we land on a weekday\n    if (isSaturday(_date, options)) _date.setDate(_date.getDate() + (sign < 0 ? 2 : -1));\n    if (isSunday(_date, options)) _date.setDate(_date.getDate() + (sign < 0 ? 1 : -2));\n  } // Restore hours to avoid DST lag\n\n\n  _date.setHours(hours);\n\n  return _date;\n} // Fallback for modularized imports:\n\nexport default addBusinessDays;","map":{"version":3,"names":["constructFrom","isSaturday","isSunday","isWeekend","toDate","addBusinessDays","date","amount","options","_date","in","startedOnWeekend","isNaN","NaN","hours","getHours","sign","fullWeeks","Math","trunc","setDate","getDate","restDays","abs","setHours"],"sources":["C:/Users/mkane/Downloads/NFLPredictions/nfl-predictions/node_modules/date-fns/addBusinessDays.js"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\nimport { isSaturday } from \"./isSaturday.js\";\nimport { isSunday } from \"./isSunday.js\";\nimport { isWeekend } from \"./isWeekend.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addBusinessDays} function options.\n */\n\n/**\n * @name addBusinessDays\n * @category Day Helpers\n * @summary Add the specified number of business days (mon - fri) to the given date.\n *\n * @description\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of business days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the business days added\n *\n * @example\n * // Add 10 business days to 1 September 2014:\n * const result = addBusinessDays(new Date(2014, 8, 1), 10)\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\n */\nexport function addBusinessDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  const startedOnWeekend = isWeekend(_date, options);\n\n  if (isNaN(amount)) return constructFrom(options?.in, NaN);\n\n  const hours = _date.getHours();\n  const sign = amount < 0 ? -1 : 1;\n  const fullWeeks = Math.trunc(amount / 5);\n\n  _date.setDate(_date.getDate() + fullWeeks * 7);\n\n  // Get remaining days not part of a full week\n  let restDays = Math.abs(amount % 5);\n\n  // Loops over remaining days\n  while (restDays > 0) {\n    _date.setDate(_date.getDate() + sign);\n    if (!isWeekend(_date, options)) restDays -= 1;\n  }\n\n  // If the date is a weekend day and we reduce a dividable of\n  // 5 from it, we land on a weekend date.\n  // To counter this, we add days accordingly to land on the next business day\n  if (startedOnWeekend && isWeekend(_date, options) && amount !== 0) {\n    // If we're reducing days, we want to add days until we land on a weekday\n    // If we're adding days we want to reduce days until we land on a weekday\n    if (isSaturday(_date, options))\n      _date.setDate(_date.getDate() + (sign < 0 ? 2 : -1));\n    if (isSunday(_date, options))\n      _date.setDate(_date.getDate() + (sign < 0 ? 1 : -2));\n  }\n\n  // Restore hours to avoid DST lag\n  _date.setHours(hours);\n\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addBusinessDays;\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,MAA/B,EAAuCC,OAAvC,EAAgD;EACrD,MAAMC,KAAK,GAAGL,MAAM,CAACE,IAAD,EAAOE,OAAO,EAAEE,EAAhB,CAApB;;EACA,MAAMC,gBAAgB,GAAGR,SAAS,CAACM,KAAD,EAAQD,OAAR,CAAlC;EAEA,IAAII,KAAK,CAACL,MAAD,CAAT,EAAmB,OAAOP,aAAa,CAACQ,OAAO,EAAEE,EAAV,EAAcG,GAAd,CAApB;;EAEnB,MAAMC,KAAK,GAAGL,KAAK,CAACM,QAAN,EAAd;;EACA,MAAMC,IAAI,GAAGT,MAAM,GAAG,CAAT,GAAa,CAAC,CAAd,GAAkB,CAA/B;EACA,MAAMU,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWZ,MAAM,GAAG,CAApB,CAAlB;;EAEAE,KAAK,CAACW,OAAN,CAAcX,KAAK,CAACY,OAAN,KAAkBJ,SAAS,GAAG,CAA5C,EAVqD,CAYrD;;;EACA,IAAIK,QAAQ,GAAGJ,IAAI,CAACK,GAAL,CAAShB,MAAM,GAAG,CAAlB,CAAf,CAbqD,CAerD;;EACA,OAAOe,QAAQ,GAAG,CAAlB,EAAqB;IACnBb,KAAK,CAACW,OAAN,CAAcX,KAAK,CAACY,OAAN,KAAkBL,IAAhC;;IACA,IAAI,CAACb,SAAS,CAACM,KAAD,EAAQD,OAAR,CAAd,EAAgCc,QAAQ,IAAI,CAAZ;EACjC,CAnBoD,CAqBrD;EACA;EACA;;;EACA,IAAIX,gBAAgB,IAAIR,SAAS,CAACM,KAAD,EAAQD,OAAR,CAA7B,IAAiDD,MAAM,KAAK,CAAhE,EAAmE;IACjE;IACA;IACA,IAAIN,UAAU,CAACQ,KAAD,EAAQD,OAAR,CAAd,EACEC,KAAK,CAACW,OAAN,CAAcX,KAAK,CAACY,OAAN,MAAmBL,IAAI,GAAG,CAAP,GAAW,CAAX,GAAe,CAAC,CAAnC,CAAd;IACF,IAAId,QAAQ,CAACO,KAAD,EAAQD,OAAR,CAAZ,EACEC,KAAK,CAACW,OAAN,CAAcX,KAAK,CAACY,OAAN,MAAmBL,IAAI,GAAG,CAAP,GAAW,CAAX,GAAe,CAAC,CAAnC,CAAd;EACH,CA/BoD,CAiCrD;;;EACAP,KAAK,CAACe,QAAN,CAAeV,KAAf;;EAEA,OAAOL,KAAP;AACD,C,CAED;;AACA,eAAeJ,eAAf","ignoreList":[]},"metadata":{},"sourceType":"module"}