{"ast":null,"code":"import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n/**\n * The {@link max} function options.\n */\n\n/**\n * @name max\n * @category Common Helpers\n * @summary Return the latest of the given dates.\n *\n * @description\n * Return the latest of the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param dates - The dates to compare\n *\n * @returns The latest of the dates\n *\n * @example\n * // Which of these dates is the latest?\n * const result = max([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Sun Jul 02 1995 00:00:00\n */\n\nexport function max(dates, options) {\n  let result;\n  let context = options?.in;\n  dates.forEach(date => {\n    // Use the first date object as the context function\n    if (!context && typeof date === \"object\") context = constructFrom.bind(null, date);\n    const date_ = toDate(date, context);\n    if (!result || result < date_ || isNaN(+date_)) result = date_;\n  });\n  return constructFrom(context, result || NaN);\n} // Fallback for modularized imports:\n\nexport default max;","map":{"version":3,"names":["constructFrom","toDate","max","dates","options","result","context","in","forEach","date","bind","date_","isNaN","NaN"],"sources":["C:/Users/mkane/Downloads/NFLPredictions/nfl-predictions/node_modules/date-fns/max.js"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link max} function options.\n */\n\n/**\n * @name max\n * @category Common Helpers\n * @summary Return the latest of the given dates.\n *\n * @description\n * Return the latest of the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param dates - The dates to compare\n *\n * @returns The latest of the dates\n *\n * @example\n * // Which of these dates is the latest?\n * const result = max([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Sun Jul 02 1995 00:00:00\n */\nexport function max(dates, options) {\n  let result;\n  let context = options?.in;\n\n  dates.forEach((date) => {\n    // Use the first date object as the context function\n    if (!context && typeof date === \"object\")\n      context = constructFrom.bind(null, date);\n\n    const date_ = toDate(date, context);\n    if (!result || result < date_ || isNaN(+date_)) result = date_;\n  });\n\n  return constructFrom(context, result || NaN);\n}\n\n// Fallback for modularized imports:\nexport default max;\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,GAAT,CAAaC,KAAb,EAAoBC,OAApB,EAA6B;EAClC,IAAIC,MAAJ;EACA,IAAIC,OAAO,GAAGF,OAAO,EAAEG,EAAvB;EAEAJ,KAAK,CAACK,OAAN,CAAeC,IAAD,IAAU;IACtB;IACA,IAAI,CAACH,OAAD,IAAY,OAAOG,IAAP,KAAgB,QAAhC,EACEH,OAAO,GAAGN,aAAa,CAACU,IAAd,CAAmB,IAAnB,EAAyBD,IAAzB,CAAV;IAEF,MAAME,KAAK,GAAGV,MAAM,CAACQ,IAAD,EAAOH,OAAP,CAApB;IACA,IAAI,CAACD,MAAD,IAAWA,MAAM,GAAGM,KAApB,IAA6BC,KAAK,CAAC,CAACD,KAAF,CAAtC,EAAgDN,MAAM,GAAGM,KAAT;EACjD,CAPD;EASA,OAAOX,aAAa,CAACM,OAAD,EAAUD,MAAM,IAAIQ,GAApB,CAApB;AACD,C,CAED;;AACA,eAAeX,GAAf","ignoreList":[]},"metadata":{},"sourceType":"module"}